type Person 
{
	email:String!
	firstname: String!
	lastname: String!
	
	## Skills of a person, with expertiseLevel info
	## No way to order by expertiseLevel descendent out of the box
	personSkills(first: Int = 3, offset: Int = 0): [PersonSkill]	
	
	## Skills of a person, but without expertiseLevel info
	# skills: [Skill] @relation(name: "HAS_SKILL", direction: "OUT")	
}

type Skill 
{
	name1: String!
	name2: String
	
	## People who have this skill, with expertiseLevel info
	## No way to order by expertiseLevel descendent out of the box
	skillPersons(first: Int = 3, offset: Int = 0): [PersonSkill]	
	
	## People who have this skill, but without expertiseLevel info
	# persons: [Person] @relation(name: "HAS_SKILL", direction: "IN")
	
	## Calculate whether it is a technical skill or not
	isTechnical: Boolean
    @cypher(
      statement: "MATCH (this) RETURN 'TechnicalSkill' IN labels(this)"
    )	
}

type PersonSkill @relation(name: "HAS_SKILL") 
{
    from: Person!
    to: Skill!
    expertiseLevel: Int!
}

type Query 
{
	GetSkillsBySubstring(substring: String!): [Skill] @cypher
	(
		statement: """MATCH (s:Skill) 
		WHERE s.name1 CONTAINS $substring 
		RETURN s"""
	)
			
	GetSimilarPersons(person_email: String!, first: Int = 3): [Person] @cypher
	(
		statement: """MATCH (p1:Person {email:$person_email})
		MATCH (p1)-[hs1:HAS_SKILL]->(s:Skill) WHERE hs1.expertiseLevel >= 3
		MATCH (p2:Person) WHERE p2 <> p1
		OPTIONAL MATCH (p2)-[hs2:HAS_SKILL]->(s) WHERE hs2.expertiseLevel >= 3 // overlapping skills
		WITH p2, COUNT(hs1) AS totalSkillsCnt, COUNT(hs2) AS overlappingSkillsCnt		
		WITH p2, totalSkillsCnt, overlappingSkillsCnt, 1 AS overlappingTimezoneCnt
		WITH p2, (0.9 * overlappingSkillsCnt) + (0.1 * overlappingTimezoneCnt) AS totalScore
		RETURN p2
		ORDER BY totalScore DESC 
		LIMIT $first"""
	)		
	
	GetSimilarSkills(skill_name1: String!, first: Int = 3): [Skill] @cypher
	(
		statement: """MATCH (s1:Skill {name1:$skill_name1})
		MATCH (p1:Person)-[hs1:HAS_SKILL]->(s1) WHERE hs1.expertiseLevel >= 3
		OPTIONAL MATCH (p1)-[hs2:HAS_SKILL]->(s2:Skill) WHERE s2 <> s1
		AND hs2.expertiseLevel >= 3
		WITH s2, COUNT(hs1) AS totalPersonsCnt, COUNT(hs2) AS skillPersonsCnt		
		RETURN s2
		ORDER BY skillPersonsCnt DESC 
		LIMIT $first"""
	)		
}

type Mutation 
{	
	MergeSkill(name1: String!, name2: String, is_technical: Boolean = false): Skill @cypher
	(
		statement: """MERGE (s:Skill {name1:$name1}) 
		SET s.name2 = coalesce($name2,'') 
		FOREACH (ignoreme IN CASE WHEN $is_technical THEN [1] ELSE [] END | SET s:TechnicalSkill)	
		FOREACH (ignoreme IN CASE WHEN $is_technical THEN [] ELSE [1] END | REMOVE s:TechnicalSkill)	
		RETURN s"""
	)		

	MergePerson(email: String!, firstname: String, lastname: String): Person @cypher
	(
		statement: """MERGE (p:Person {email:$email}) 
		SET p.firstname = coalesce($firstname,''), p.lastname = coalesce($lastname,'') 
		RETURN p"""
	)	
	
	## Create the relationship only if both Person and Skill already exist, 
	## but if the relation does exist too, merge into the existing one
	## and update its expertiseLevel, which may have changed (store timestamp too?)
	MergePersonSkill(person_email: String!, skill_name1: String!, expertise_level: Int!): PersonSkill @cypher
	(
		statement: """MATCH (p:Person {email:$person_email})
		MATCH (s:Skill {name1:$skill_name1})
		MERGE (p)-[ps:HAS_SKILL]->(s)
		SET ps.expertiseLevel = $expertise_level
		RETURN ps"""
	)		
}


